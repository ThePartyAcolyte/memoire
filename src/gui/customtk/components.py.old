"""
Componentes mejorados para MnemoX GUI
Migrados desde test_complete_poc.py con funcionalidad probada.
"""

import customtkinter as ctk
import platform
from pathlib import Path


def get_scaling_factor(window):
    """Detectar factor de scaling de manera segura multiplataforma."""
    try:
        system = platform.system()
        
        if system == "Windows":
            # Windows: usar ctypes para obtener factor real
            from ctypes import windll
            scale_factor = windll.shcore.GetScaleFactorForDevice(0) / 100
            return scale_factor
        else:
            # Mac/Linux: usar método estándar de tkinter
            current_dpi = window.winfo_fpixels('1i')
            scale_factor = current_dpi / 96
            return scale_factor
    except Exception as e:
        # Fallback: sin scaling
        return 1.0


# Variable global para manejar múltiples toasts
_active_toasts = []


class ToastNotification(ctk.CTkToplevel):
    """Sistema de toast corregido basado en test_complete_poc.py"""
    
    def __init__(self, parent):
        self.parent = parent
    
    def show_success(self, message, duration=3000):
        """Mostrar toast de éxito."""
        ToastWindow(self.parent, message, "success", duration)
    
    def show_error(self, message, duration=4000):
        """Mostrar toast de error."""
        ToastWindow(self.parent, message, "error", duration)
    
    def show_warning(self, message, duration=3500):
        """Mostrar toast de advertencia."""
        ToastWindow(self.parent, message, "warning", duration)
    
    def show_info(self, message, duration=3000):
        """Mostrar toast de información."""
        ToastWindow(self.parent, message, "info", duration)


class ToastWindow(ctk.CTkToplevel):
    """Toast como ventana independiente simple con posicionamiento correcto."""
    
    def __init__(self, parent, message, toast_type="info", duration=3000):
        super().__init__(parent)
        
        self.parent = parent
        self.duration = duration
        
        # Sin barra nativa
        self.overrideredirect(True)
        
        # Configurar ventana
        self.geometry("300x70")
        self.transient(parent)
        self.attributes('-topmost', True)  # Siempre al frente
        
        # Colores según tipo
        colors = {
            "success": "#10B981",
            "error": "#EF4444", 
            "warning": "#F59E0B",
            "info": "#3B82F6"
        }
        
        color = colors.get(toast_type, colors["info"])
        
        # Configurar color de fondo
        self.configure(fg_color=color)
        
        self.create_content(message)
        self.add_to_stack()
        
        # Auto-cerrar
        self.after(duration, self.close_toast)
    
    def create_content(self, message):
        """Crear contenido del toast."""
        # Frame principal con padding
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=12, pady=12)
        
        # Mensaje centrado
        message_label = ctk.CTkLabel(
            main_frame,
            text=message,
            font=ctk.CTkFont(size=12, weight="normal"),
            text_color="white",
            wraplength=220,
            justify="center"
        )
        message_label.pack(side="left", fill="both", expand=True)
        
        # Botón cerrar discreto
        close_btn = ctk.CTkButton(
            main_frame,
            text="×",
            width=18,
            height=18,
            font=ctk.CTkFont(size=12),
            fg_color="transparent",
            hover_color=("white", "gray20"),
            text_color="white",
            command=self.close_toast
        )
        close_btn.pack(side="right", padx=(8, 0))
    
    def add_to_stack(self):
        """Agregar toast al stack y posicionar."""
        global _active_toasts
        _active_toasts.append(self)
        self.position_toast()
    
    def position_toast(self):
        """Posicionar toast centrado horizontalmente usando coordenadas reales."""
        global _active_toasts
        
        # Forzar actualización
        self.update()
        
        # Detectar factor de scaling
        scaling_factor = get_scaling_factor(self)
        
        # Obtener dimensiones de pantalla (lógicas)
        screen_width_logical = self.winfo_screenwidth()
        
        # Calcular dimensiones reales
        screen_width_real = int(screen_width_logical * scaling_factor)
        
        # Calcular posición Y basada en la posición en el stack
        toast_index = _active_toasts.index(self) if self in _active_toasts else 0
        
        # CORRECCIÓN: Usar coordenadas reales directamente (sin conversión)
        x_real = (screen_width_real - 300) // 2
        y_real = 20 + (toast_index * 80)
        
        self.geometry(f"300x70+{x_real}+{y_real}")
    
    def close_toast(self):
        """Cerrar toast."""
        global _active_toasts
        try:
            if self in _active_toasts:
                _active_toasts.remove(self)
                
            # Reposicionar toasts restantes usando coordenadas reales
            for i, toast in enumerate(_active_toasts):
                scaling_factor = get_scaling_factor(toast)
                screen_width_logical = toast.winfo_screenwidth()
                screen_width_real = int(screen_width_logical * scaling_factor)
                
                # CORRECCIÓN: Usar coordenadas reales directamente
                x_real = (screen_width_real - 300) // 2
                y_real = 20 + (i * 80)
                
                toast.geometry(f"300x70+{x_real}+{y_real}")
                
            self.destroy()
        except:
            pass


class ConfirmDialog(ctk.CTkToplevel):
    """Diálogo de confirmación con header personalizado."""
    
    def __init__(self, parent, title="Confirmar", message="¿Estás seguro?", 
                 confirm_text="Confirmar", cancel_text="Cancelar", 
                 icon="❓", danger=False):
        super().__init__(parent)
        
        self.result = False
        self.on_confirm = None
        self.on_cancel = None
        
        # Sin barra nativa
        self.overrideredirect(True)
        
        self.geometry("400x200")
        self.transient(parent)
        self.grab_set()
        self.configure(fg_color=("gray90", "gray10"))
        
        # Centrar en ventana padre
        self.center_on_parent(parent)
        
        self.create_header(title, icon)
        self.create_content(message, confirm_text, cancel_text, danger)
    
    def center_on_parent(self, parent):
        """Centrar en ventana padre."""
        self.update_idletasks()
        x = parent.winfo_x() + (parent.winfo_width() // 2) - 200
        y = parent.winfo_y() + (parent.winfo_height() // 2) - 100
        self.geometry(f"400x200+{x}+{y}")
    
    def create_header(self, title, icon):
        """Crear header del diálogo."""
        header = ctk.CTkFrame(self, height=40, corner_radius=0)
        header.pack(fill="x")
        header.pack_propagate(False)
        
        # Título con icono
        title_label = ctk.CTkLabel(
            header,
            text=f"{icon} {title}",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        title_label.pack(side="left", padx=15, pady=12)
        
        # Botón cerrar
        close_btn = ctk.CTkButton(
            header,
            text="×",
            width=25,
            height=25,
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            hover_color="#EF4444",
            command=self.cancel_action
        )
        close_btn.pack(side="right", padx=15, pady=7)
        
        # Hacer header arrastrable
        self.make_draggable(header)
    
    def make_draggable(self, widget):
        """Hacer widget arrastrable."""
        def start_drag(event):
            widget.start_x = event.x
            widget.start_y = event.y
        
        def do_drag(event):
            x = self.winfo_x() + (event.x - widget.start_x)
            y = self.winfo_y() + (event.y - widget.start_y)
            self.geometry(f"+{x}+{y}")
        
        widget.bind("<Button-1>", start_drag)
        widget.bind("<B1-Motion>", do_drag)
    
    def create_content(self, message, confirm_text, cancel_text, danger):
        """Crear contenido del diálogo."""
        content = ctk.CTkFrame(self, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Mensaje
        message_label = ctk.CTkLabel(
            content,
            text=message,
            font=ctk.CTkFont(size=12),
            justify="center",
            wraplength=350
        )
        message_label.pack(expand=True, pady=(10, 20))
        
        # Botones
        btn_frame = ctk.CTkFrame(content, fg_color="transparent")
        btn_frame.pack(fill="x")
        btn_frame.grid_columnconfigure((0, 1), weight=1)
        
        cancel_btn = ctk.CTkButton(
            btn_frame,
            text=cancel_text,
            command=self.cancel_action,
            width=120,
            height=35
        )
        cancel_btn.grid(row=0, column=0, padx=(0, 10), sticky="ew")
        
        confirm_color = "#EF4444" if danger else None
        confirm_btn = ctk.CTkButton(
            btn_frame,
            text=confirm_text,
            command=self.confirm_action,
            width=120,
            height=35,
            fg_color=confirm_color
        )
        confirm_btn.grid(row=0, column=1, padx=(10, 0), sticky="ew")
    
    def confirm_action(self):
        """Acción de confirmar."""
        self.result = True
        if self.on_confirm:
            self.on_confirm()
        self.destroy()
    
    def cancel_action(self):
        """Acción de cancelar."""
        self.result = False
        if self.on_cancel:
            self.on_cancel()
        self.destroy()


class ProjectDialog(ctk.CTkToplevel):
    """Diálogo para crear/editar proyectos con botones de acción."""
    
    def __init__(self, parent, title="Proyecto", project_data=None, on_save=None):
        super().__init__(parent)
        
        self.project_data = project_data or {}
        self.on_save_callback = on_save
        self.result = None
        
        # Sin barra nativa
        self.overrideredirect(True)
        
        self.geometry("500x350")
        self.transient(parent)
        self.grab_set()
        self.configure(fg_color=("gray90", "gray10"))
        
        # Centrar en ventana padre
        self.center_on_parent(parent)
        
        self.create_header(title)
        self.create_content()
    
    def center_on_parent(self, parent):
        """Centrar en ventana padre."""
        self.update_idletasks()
        x = parent.winfo_x() + (parent.winfo_width() // 2) - 250
        y = parent.winfo_y() + (parent.winfo_height() // 2) - 175
        self.geometry(f"500x350+{x}+{y}")
    
    def create_header(self, title):
        """Crear header del diálogo."""
        header = ctk.CTkFrame(self, height=40, corner_radius=0)
        header.pack(fill="x")
        header.pack_propagate(False)
        
        # Icono y título
        icon = "📁" if "Crear" in title else "✏️"
        title_label = ctk.CTkLabel(
            header,
            text=f"{icon} {title}",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        title_label.pack(side="left", padx=15, pady=12)
        
        # Botón cerrar
        close_btn = ctk.CTkButton(
            header,
            text="×",
            width=25,
            height=25,
            font=ctk.CTkFont(size=14),
            fg_color="transparent",
            hover_color="#EF4444",
            command=self.cancel_action
        )
        close_btn.pack(side="right", padx=15, pady=7)
        
        # Hacer header arrastrable
        self.make_draggable(header)
    
    def make_draggable(self, widget):
        """Hacer widget arrastrable."""
        def start_drag(event):
            widget.start_x = event.x
            widget.start_y = event.y
        
        def do_drag(event):
            x = self.winfo_x() + (event.x - widget.start_x)
            y = self.winfo_y() + (event.y - widget.start_y)
            self.geometry(f"+{x}+{y}")
        
        widget.bind("<Button-1>", start_drag)
        widget.bind("<B1-Motion>", do_drag)
    
    def create_content(self):
        """Crear contenido del diálogo."""
        content = ctk.CTkFrame(self, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Nombre del proyecto
        name_label = ctk.CTkLabel(
            content,
            text="Project Name:",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        name_label.pack(anchor="w", pady=(0, 5))
        
        self.name_entry = ctk.CTkEntry(
            content,
            placeholder_text="Enter project name...",
            height=35,
            font=ctk.CTkFont(size=12)
        )
        self.name_entry.pack(fill="x", pady=(0, 15))
        
        # Descripción
        desc_label = ctk.CTkLabel(
            content,
            text="Description (optional):",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        desc_label.pack(anchor="w", pady=(0, 5))
        
        self.desc_textbox = ctk.CTkTextbox(
            content,
            height=120,
            font=ctk.CTkFont(size=11)
        )
        self.desc_textbox.pack(fill="both", expand=True, pady=(0, 20))
        
        # Cargar datos existentes si es edición
        if self.project_data:
            self.name_entry.insert(0, self.project_data.get('name', ''))
            self.desc_textbox.insert("1.0", self.project_data.get('description', ''))
        
        # Botones de acción
        self.create_action_buttons(content)
    
    def create_action_buttons(self, parent):
        """Crear botones de acción."""
        btn_frame = ctk.CTkFrame(parent, fg_color="transparent")
        btn_frame.pack(fill="x")
        btn_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Botón cancelar
        cancel_btn = ctk.CTkButton(
            btn_frame,
            text="Cancel",
            command=self.cancel_action,
            width=120,
            height=35,
            fg_color="transparent",
            border_width=1
        )
        cancel_btn.grid(row=0, column=0, padx=(0, 10), sticky="ew")
        
        # Botón guardar
        save_text = "Update" if self.project_data else "Create"
        save_btn = ctk.CTkButton(
            btn_frame,
            text=save_text,
            command=self.save_action,
            width=120,
            height=35
        )
        save_btn.grid(row=0, column=1, padx=(10, 0), sticky="ew")
    
    def save_action(self):
        """Acción de guardar."""
        name = self.name_entry.get().strip()
        description = self.desc_textbox.get("1.0", "end-1c").strip()
        
        if not name:
            # Aquí se podría mostrar un toast de error
            return
        
        self.result = {
            'name': name,
            'description': description
        }
        
        if self.on_save_callback:
            self.on_save_callback(self.result)
        
        self.destroy()
    
    def cancel_action(self):
        """Acción de cancelar."""
        self.result = None
        self.destroy()
